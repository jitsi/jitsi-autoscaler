# Port used for exposing the autoscaler REST API
#PORT=3000

#
#LOG_LEVEL=info

#
#REDIS_HOST=localhost

#
#REDIS_PORT=6379

#
#REDIS_PASSWORD=

#
#REDIS_TLS=false

#
#REDIS_DB=0

# When performing redis scans to read data, this represents the max batch of entries to be returned
#REDIS_SCAN_COUNT=100

# Used for validating the JWTs of the incoming requests
# If false, no JWT validation will be performed (useful during development, when running locally)
# If true, the JWT validation will be performed according to the ASAP_* settings
#PROTECTED_API=true

# Used for validating the JWTs of the incoming requests
# How long the public keys will be cached
#ASAP_PUB_KEY_TTL=3600

# Used for validating the JWTs of the incoming requests
# It represents the URL for the retrieval of public keys by JWT key id (required)
ASAP_PUB_KEY_BASE_URL="https://localhost:18433"

# Used for validating the JWTs of the incoming requests
# It represents the accepted JWT audiences (required)
ASAP_JWT_AUD=jitsi-autoscaler

# Used for validating the JWTs of the incoming requests
# It represents the comma separated list of the accepted JWT issuers (required)
ASAP_JWT_ACCEPTED_HOOK_ISS=jitsi-autoscaler-sidecar

# How long to wait after starting the autoscaler before starting the creation of jobs for group processing
#INITIAL_WAIT_FOR_POOLING_MS=120000

# Set this to true to run the autoscaler without actually launching group instances
#DRY_RUN=false

# This file contains the description of the pre-defined autoscaling groups (required)
GROUP_CONFIG_FILE=./groups.json

# When the autoscaler is used for Oracle Cloud, this represents the default instance configuration id
# used when launching an instance, if one is not already present in the group definition (required)
DEFAULT_INSTANCE_CONFIGURATION_ID="ocid1.instanceconfiguration.oc1.phx.demo"

# When the autoscaler is used for Oracle Cloud, this represents the default compartment id
# used when launching an instance, if one is not already present in the group definition (required)
DEFAULT_COMPARTMENT_ID="ocid1.compartment.oc1.demo"

# For how long to track the metrics emitted by the launched instances
# If defines the size of the window of metrics that the autoscaler keeps for making launching/scaling decisions
# (e.g. for a JVB instance, how long to store the stress metric reported by the JVB at a certain point in time)
#METRIC_TTL_SEC=3600

# For how long to track metrics exposed by the autoscaler to describe the state of the launched instances
# (e.g. one such metric is how many instances were launched by the autoscaler, but are untracked by it)
#SERVICE_LEVEL_METRICS_TTL_SEC=600

# For how long to store information about the instances launched by the autoscaler,
# which finished their boot-time processing
#IDLE_TTL_SEC=300

# For how long to store information about the instances launched by the autoscaler,
# which are still in provisioning mode (they did not finish yet their boot time processing)
#PROVISIONING_TTL_SEC=900

# For how long to store information about the instances launched by the autoscaler,
# which were requested by the autoscaler to shutdown
# Defaults to 1 day
#SHUTDOWN_TTL_SEC=86400

# For how long to store information about the instances launched by the autoscaler,
# which were requested by the autoscaler to reconfigure themselves
# Defaults to 1 day
#RECONFIGURE_TTL_SEC=86400

# For how long to store information about the instances launched by the autoscaler,
# which were requested by the autoscaler to shutdown and which reported they are shutting down
# Defaults to 10 minutes
#SHUTDOWN_STATUS_TTL_SEC=600

# The autoscaler stores an audit of the actions made by the group/instances
# in the last AUDIT_TTL_SEC seconds.
# Defaults to 2 days
#AUDIT_TTL_SEC=172800

# Maximum number of untracked instances per group to throttle scale up
#MAX_THROTTLE_THRESHOLD=40

# Maximum time (in seconds) to keep group related data after the group is deleted or no action is performed on it
# Defaults to 2 days
#GROUP_RELATED_DATA_TTL_SEC=172800

# With what interval this autoscaler should try producing jobs for group processing
#GROUP_JOBS_CREATION_INTERVAL_SEC=30

# With what interval this autoscaler should try producing jobs for sanity check
#SANITY_JOBS_CREATION_INTERVAL_SEC=240

# Jobs for group processing should be created once every JOB_CREATION_GRACE_PERIOD_SEC seconds,
# irrespective of how many autoscaler services are running
#GROUP_JOBS_CREATION_GRACE_PERIOD_SEC=30

# Jobs for sanity check should be created once every SANITY_JOBS_CREATION_GRACE_PERIOD_SEC seconds,
# irrespective of how many autoscaler services are running
#SANITY_JOBS_CREATION_GRACE_PERIOD_SEC=240

# Job creation lock ensures only one autoscaler at a time can produce jobs
#JOBS_CREATION_LOCK_TTL_MS=30000

# For how long can a group be locked for processing
# Timeout for processing a group is equal to the timeout for locking a group for processing
#GROUP_LOCK_TTL_MS=180000

# Max time allowed for a sanity job to finish processing until it times out - in ms
#SANITY_LOOP_PROCESSING_TIMEOUT_MS=180000

# At which interval will the autoscaler expose metrics about its groups and sanity
# (e.g. min/max/desired for groups, how many untracked instances exist)
#METRICS_LOOP_INTERVAL_MS=60000

# Autoscaler exposes a report about the groups and their instances
# It uses external calls to the cloud provider to retrieve part of the information
# The autoscaler waits for max REPORT_EXT_CALL_MAX_TIME_IN_SECONDS seconds for the external call to respond after all the automatic retries
#REPORT_EXT_CALL_MAX_TIME_IN_SECONDS=60

# Autoscaler exposes a report about the groups and their instances
# It uses external calls to the cloud provider to retrieve part of the information
# In case the external calls are retried, the backoff will have a max delay of REPORT_EXT_CALL_MAX_DELAY_IN_SECONDS between consecutive retries
#REPORT_EXT_CALL_MAX_DELAY_IN_SECONDS=30

# On which Oracle API status code should the autoscaler group report generation retry the operation
# By default, it will retry on Too Many Requests, Conflict
#REPORT_EXT_CALL_RETRYABLE_STATUS_CODES="429 409"

# If this autoscaler supports only one cloud provider, this can be specified here
# The autoscaler supports the following cloud providers: oracle, digitalocean and custom
#CLOUD_PROVIDER=oracle

# If the autoscaler supports multiple cloud providers, they should be specified here
# In this case, the CLOUD_PROVIDER config will be ignored
# The autoscaler supports the following cloud providers: oracle, digitalocean and custom
#CLOUD_PROVIDERS=

# If CLOUD_PROVIDER is oracle, this is the path to the OCI client config file
OCI_CONFIGURATION_FILE_PATH=~/.oci/config

# If CLOUD_PROVIDER is oracle, we can specify here a custom OCI profile to use in the OCI client
OCI_CONFIGURATION_PROFILE=DEFAULT

# If CLOUD_PROVIDER is digitalocean, this is the path to the Digital Ocean client config file
#DIGITALOCEAN_CONFIGURATION_FILE_PATH=

# If CLOUD_PROVIDER is digitalocean, this is the path to the Digital Ocean API token
#DIGITALOCEAN_API_TOKEN=

# If CLOUD_PROVIDER is custome, this is max wait time for the launch instance script to finish
#CUSTOM_CONFIGURATION_LAUNCH_SCRIPT_TIMEOUT_MS=60000

# If CLOUD_PROVIDER is custom, this is the path to the custom script to launch instances with
#CUSTOM_CONFIGURATION_LAUNCH_SCRIPT_FILE_PATH="./scripts/custom-launch.sh"